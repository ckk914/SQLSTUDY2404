
-----------------------------------------------------------------------------------------------------------------------------------------------------
-- # 트랜잭션(Transaction)
-- -연산이 묶여서 하나의 논리적인 작업 단위로 처리되는 것
-----------------------------------------------------------------------------------------------------------------------------------------------------
-- ## ACID

-- **원자성(Atomicity)**: 트랜잭션은 일련의 연산 중 하나라도 실패하면 전체 연산이 취소됩니다.
-- **일관성(Consistency)**: 트랜잭션이 완료되면 데이터베이스의 일관성이 유지됩니다.
-- **격리성(Isolation)**: 여러 개의 트랜잭션이 동시에 수행될 때 각각의 트랜잭션이 서로에게 영향을 미치지 않습니다.
-- **지속성(Durability)**: 트랜잭션이 완료되면 그 결과가 영구적으로 반영됩니다.
-----------------------------------------------------------------------------------------------------------------------------------------------------
-- TCL(Transaction Control Language)은 트랜잭션의 처리를 위한 명령어들의 집합

--**COMMIT**: 현재까지 수행한 트랜잭션의 결과를 데이터베이스에 저장합니다. 
--            COMMIT 명령어를 실행하면 트랜잭션이 종료되고, 데이터베이스의 일관성이 유지됩니다.

-- **ROLLBACK**: 현재까지 수행한 트랜잭션의 결과를 취소하고, 트랜잭션을 초기 상태로 되돌립니다
--               ROLLBACK 명령어를 실행하면 트랜잭션이 종료되고, 데이터베이스의 일관성이 유지됩니다.

-- **SAVEPOINT**: 현재 트랜잭션 내에서 중간에 SAVEPOINT를 설정하여, 해당 지점까지의 작업을 롤백할 수 있도록 합니다. 
--                SAVEPOINT를 설정하면 ROLLBACK TO SAVEPOINT를 사용하여 해당 지점까지의 작업을 취소할 수 있습니다.

-- **ROLLBACK TO SAVEPOINT**: SAVEPOINT 지점까지 수행한 작업을 취소하고, SAVEPOINT 이후의 작업은 유지합니다.
-----------------------------------------------------------------------------------------------------------------------------------------------------
--[윈도우 함수]
--MIN(), MAX(), SUM(), COUNT() 등과 같은 기존 함수,
--LAG(),LEAD(),RANK(), ROW_NUMBER() 등
-----------------------------------------------------------------------------------------------------------------------------------------------------
-- RANK()
-----------------------------------------------------------------------------------------------------------------------------------------------------
-- RANK() 함수는
--  여러 행의 값이 같은 경우라면 같은 순위를 부여해주는 방식입니다. 
-- 흔히 많이들 얘기하는 공동 순위를 부여하고
--  그 다음 나오는 행에는 같은 순위가 나왔던 숫자만큼 건너 뛰고⭐️
--   다음 순위를 부여
-----------------------------------------------------------------------------------------------------------------------------------------------------
SELECT *
     , RANK() OVER(ORDER BY `홈런` DESC) AS 'RANK'
FROM kbo_hr
-------------------------------------------------------------------------------------------
-- DENSE_RANK()
-----------------------------------------------------------------------------------------------------------------------------------------------------
-- DENSE_RANK() 함수는 같은 값이 나오는 행에 동일한 순위를 부여해준다는 점에서는 RANK() 함수와 동일
-- 그 다음에 나오는 행에는 순위를 건너뛰지 않고 이어서 순위를 부여
-----------------------------------------------------------------------------------------------------------------------------------------------------
SELECT *
     , DENSE_RANK() OVER(ORDER BY `홈런` DESC) AS 'RANK'
FROM kbo_hr
-------------------------------------------------------------------------------------------
-- ROW_NUMBER()
--  각 행에 순위를 부여할 때 동점인 경우가 있어도 이를 무시하고 연속적인 순위를 부여
-----------------------------------------------------------------------------------------------------------------------------------------------------
SELECT *
     , ROW_NUMBER() OVER(ORDER BY `홈런` DESC) AS 'RANK'
FROM kbo_hr
-------------------------------------------------------------------------------------------
-- PARTITION BY 추천경로   : 추천경로에서 각각 순위를 매겨라
------------------------------------------------------------------------------------------
-- **LEAD()**: 현재 행보다 지정된 수만큼
-- 앞선 행의 값을 반환합니다. (다음 행을 가져옴)
------------------------------------------------------------------------------------------
-- **LAG()**: 현재 행보다 지정된 수만큼
-- 뒤에 있는 행의 값을 반환합니다. (이전 행을 가져옴)
------------------------------------------------------------------------------------------
--DCL(Data Control Language)
   -- 데이터베이스 내의 접근 권한과 관련된 작업을 수행하는 명령어들
------------------------------------------------------------------------------------------
--GRANT
--GRANT SELECT, UPDATE, DELETE ON table_name TO user_name;
--GRANT 권한 TO 유저;
------------------------------------------------------------------------------------------
--REVOKE
--REVOKE SELECT, UPDATE, DELETE ON table_name FROM user_name;
--REVOKE 권한 FROM 유저;
------------------------------------------------------------------------------------------
--ROLE : 권한을 다 부여해놓고 유저에게 롤을 준다~!

--GRANT role_name TO user_name;
------------------------------------------------------------------------------------------
--WITH GRANT OPTION : 다른 사람에게 권한 부여할 수 있는 기능
-------------------------------------------------------
--CASCADE : 연쇄적 줄줄이 취소 
-------------------------------------------------------
--DELETE SET NULL => 그 지정 컬럼만 NULL로 바꿈
--DELETE CASCADE => 한줄 날려버림
-------------------------------------------------------
-- COUNT(*)  =  COUNT(1)   <= 널값 포함
-- ㄴ모든 것을 뜻하는 (*)을 이용해 COUNT

-- COUNT(column명)    <= 널값 제외
-- ㄴcolumn명을 지정해주면 null값을 제외한 row 개수를 반환
-------------------------------------------------------

CREATE TABLE STUDENT(
id number primary key,
name varchar2(100),
age number
);

INSERT INTO STUDENT VALUES (1,'김철수', 15);
INSERT INTO STUDENT VALUES (2,'홍길동', 18);

select * from student;

commit; --영구적 반영 (이거를 해야 진짜 데이터베이스로 저장됨)

INSERT INTO STUDENT VALUES (3,'둘리', 19);

ROLLBACK;  --커밋은 둘리 넣기 전이라 둘리를 지워버림!
           -- 커밋을 진작에 했으면 롤백 못함
                    
-----------------------------------------------------------------------------------------------------------------------------------------------------
--계좌 이체
-----------------------------------------------------------------------------------------------------------------------------------------------------
UPDATE tb_account
SET balance = balance +5000
where name = '김철수'
;

UPDATE tb_account
SET balance = balance -5000
where name = '박영희'
;

commit; -- 연관된 동시 작업이 끝난 후 , commit을 해야함
        -- 둘다 반영하던지 / 둘 다 취소하던지


DELETE FROM STUDENT;
ROLLBACK;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--오라클은 DDL 수행 시 자동 커밋
--SQL SERVER는 자동 커밋이 안됨
-----------------------------------------------------------------------------------------------------------------------------------------------------
select * from student;

DELETE FROM STUDENT;
ROLLBACK;

TRUNCATE TABLE STUDENT;   --롤백 안되는 삭제
-----------------------------------------------------------------------------------------------------------------------------------------------------
CREATE TABLE 고객_38(
 고객ID NUMBER PRIMARY KEY,
 고객명 VARCHAR2 (100)
);

CREATE TABLE 컨텐츠_38(
컨텐츠ID NUMBER PRIMARY KEY,
컨텐츠명 VARCHAR2(100)
);

CREATE TABLE 추천컨텐츠_38(
고객ID NUMBER,
컨텐츠ID NUMBER,
추천대상일자 DATE
);

CREATE TABLE 비선호컨텐츠_38(
고객ID NUMBER,
컨텐츠ID NUMBER,
등록일자 DATE
);

SELECT * FROM 고객_38;
INSERT INTO 고객_38 VALUES (1,'김철수');
INSERT INTO 고객_38 VALUES (2,'박영희');
COMMIT;

SELECT * FROM 컨텐츠_38;
INSERT INTO 컨텐츠_38 VALUES (1,'영화');
INSERT INTO 컨텐츠_38 VALUES (2,'애니');
INSERT INTO 컨텐츠_38 VALUES (3,'다큐');
COMMIT;

SELECT * FROM 추천컨텐츠_38;
INSERT INTO 추천컨텐츠_38 VALUES (1,1,SYSDATE);
INSERT INTO 추천컨텐츠_38 VALUES (1,2,SYSDATE);
INSERT INTO 추천컨텐츠_38 VALUES (2,2,SYSDATE);

SELECT * FROM 비선호컨텐츠_38;
INSERT INTO 비선호컨텐츠_38 VALUES (1,2,SYSDATE);
INSERT INTO 비선호컨텐츠_38 VALUES (2,1,SYSDATE);
INSERT INTO 비선호컨텐츠_38 VALUES (2,2,SYSDATE);
COMMIT;
-----------------------------------------------------------------------------------------------------------------------------------------------------
