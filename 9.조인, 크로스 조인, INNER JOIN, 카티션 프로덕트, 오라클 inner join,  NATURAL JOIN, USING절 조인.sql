
------------------------------------------------------------
--사원의 사번, 이름, 부서번호, 부서명 조회
------------------------------------------------------------
----사원의 사번, 이름, 부서번호 (tb_emp)
SELECT
    emp_no,
    emp_nm,
    dept_cd
FROM tb_emp
;
------------------------------------------------------------
SELECT
    dept_cd,
    dept_nm
FROM tb_dept
;
------------------------------------------------------------
--테이블 결합 : 조인
------------------------------------------------------------
SELECT
A.emp_no,
A.emp_nm,
A.dept_cd,
B.DEPT_CD,
B.DEPT_NM
FROM tb_emp A,tb_dept B
WHERE A.dept_cd = b.dept_cd
;
------------------------------------------------------------
-- 조인 기초 테스트 데이터
-----------------------------------------------------------------
CREATE TABLE TEST_A (
    id NUMBER(10) PRIMARY KEY
    , content VARCHAR2(200)
);
CREATE TABLE TEST_B (
    b_id NUMBER(10) PRIMARY KEY
    , reply VARCHAR2(100)
    , a_id NUMBER(10)
);

------------------------------------------------------------
INSERT INTO TEST_A  VALUES (1, 'aaa');
INSERT INTO TEST_A  VALUES (2, 'bbb');
INSERT INTO TEST_A  VALUES (3, 'ccc');
------------------------------------------------------------
INSERT INTO TEST_B  VALUES (1, 'ㄱㄱㄱ', 1);
INSERT INTO TEST_B  VALUES (2, 'ㄴㄴㄴ', 1);
INSERT INTO TEST_B  VALUES (3, 'ㄷㄷㄷ', 2);
INSERT INTO TEST_B  VALUES (4, 'ㄹㄹㄹ', 3);
------------------------------------------------------------
--조회
-- 조인의 원리는 곱하기 연산
--     카티션 프로덕트(Cartesian product)
--     두 개의 테이블에서 각각의 레코드들을 서로 결합하여 하나의 레코드로 구성하면서 가능한 모든 조합의 레코드들을 생성
--     <테이블명1> × <테이블명2>
-- 크로스 조인 : 가능한 모든 경우의 수를 매칭하여 조회
-----------------------------------------------------------------
SELECT * FROM TEST_A;
SELECT * FROM TEST_B;
-- A 조인 B 
SELECT * FROM TEST_A,TEST_B;
------------------------------------------------------------
--INNER JOIN
--두테이블 간에 연관 컬럼을 이용하여
--관계가 있는 데이트를 매칭하여 조인
-- 공통 사용된 ID 사용한 조인
------------------------------------------------------------
--오라클 inner join   where절로 조인하는 것★
-----------------------------------------------------------------
SELECT 
A.ID,
A.CONTENT,
B.B_ID,
B.REPLY
FROM TEST_A A,TEST_B B
WHERE A.ID = B.A_ID
;
------------------------------------------------------------
--사원의 사원번호와 취득한 자격증명을 조회
-----------------------------------------------------------------
SELECT
A.EMP_NO,
A.EMP_NM,
A.SEX_CD,
B.CERTI_CD,
C.certi_nm,
B.ACQU_DE
FROM TB_EMP A, TB_EMP_CERTI B, TB_CERTI C
WHERE A.EMP_NO = B.EMP_NO
;
-----------------------------------------------------------------
--사원의 사원번호와 취득한 자격증명,부서명 을 조회
-----------------------------------------------------------------
SELECT
A.EMP_NO,
A.EMP_NM,
A.SEX_CD,
D.DEPT_NM,
B.CERTI_CD,
C.certi_nm,
B.ACQU_DE
FROM TB_EMP A, TB_EMP_CERTI B, TB_CERTI C, TB_DEPT D
WHERE A.EMP_NO = B.EMP_NO
            AND B.CERTI_CD = C.CERTI_CD
            AND A.DEPT_CD = D.DEPT_CD
            AND D.DEPT_NM ='개발팀'
;
-----------------------------------------------------------------
--부서별 총 자격증 취득 개수 조회
SELECT 
  D.dept_cd,
  D.dept_nm,
  COUNT(EC.certi_cd)
FROM tb_dept D, tb_emp_certi EC, tb_emp e
WHERE E.DEPT_CD = D.DEPT_CD
        AND E.EMP_NO = EC.EMP_NO
        GROUP BY D.DEPT_CD,D.DEPT_NM
        ORDER BY D.DEPT_CD, D.DEPT_NM
;
---------------------------------------------------------------------------------------------------------------------------
-- # INNER JOIN
-- 1. 2개 이상의 테이블이 공통된 컬럼에 의해 논리적으로 결합되는 조인기법입니다.
-- 2. WHERE절에 사용된 컬럼들이 동등연산자(=)에 의해 조인됩니다.
---------------------------------------------------------------------------------------------------------------------------
-- 용인시에 사는 사원의 사원번호, 사원명, 주소, 부서코드, 부서명을 조회하고 싶다.
---------------------------------------------------------------------------------------------------------------------------
SELECT 
E.EMP_NO,
E.EMP_NM,
E.ADDR,
E.DEPT_CD,
D.DEPT_CD
FROM tb_emp E,TB_DEPT D
WHERE E.ADDR LIKE '%용인%'
        AND E.DEPT_CD = d.dept_cd
        AND E.EMP_NM LIKE '김%'
;
---------------------------------------------------------------------------------------------------------------
-- JOIN ON (ANSI 표준 조인)
-- 1. FROM절 뒤, WHERE 절 앞
-- 2. JOIN 키워드 뒤에는 조인할 테이블명을 명시
-- 3. ON 키워드 뒤에는 조인 조건을 명시
-- 4. 조인 조건 서술부(ON절) 일반 조건 서술부 (WHERE절)를 분리해서 작성하는 방법
-- 5. ON절을 이용하면 JOIN 이후의 논리연산이나 서브쿼리와 같은 추가 서술이 가능
---------------------------------------------------------------------------------------------------------------
--JOIN 앞에 INNER 가 생략되어있다. INNER JOIN
-- ON에 조인 조건 넣기
---------------------------------------------------------------------------------------------------------------
SELECT 
E.EMP_NO,
E.EMP_NM,
E.ADDR,
E.DEPT_CD,
D.DEPT_CD
FROM tb_emp E JOIN TB_DEPT D
ON E.DEPT_CD = d.dept_cd
WHERE E.ADDR LIKE '%용인%'
       AND E.EMP_NM LIKE '김%'
;
---------------------------------------------------------------------------------------------------------------
--조인 조건은 ON에다가 쓴다
---------------------------------------------------------------------------------------------------------------
SELECT
    E.emp_no,
    E.emp_nm,
    D.dept_nm,
    E.sex_cd,
    EC.certi_cd,
    C.certi_nm,
    EC.acqu_de
FROM tb_emp E 
JOIN tb_emp_certi EC
ON E.emp_no = EC.emp_no
JOIN tb_certi C 
ON  EC.certi_cd = C.certi_cd
JOIN tb_dept D
ON E.dept_cd = D.dept_cd
WHERE  D.DEPT_CD IN (100004,100006)
    AND EC.acqu_de >='20180101'
;
---------------------------------------------------------------------------------------------------------------
-- 1대 다 관계
     -- 1        M
   --회원- 게시글  
      --1명의 회원은 게시글을 여러개 쓸 수 있다.
       --1        M
   --. 게시글-댓글, 
    -- 1개의 게시글에는 여러개의 댓글을 달 수 있다. 
    --M  1
--사원-부서
   --1명의 사원은 1개의 부서에 속한다
   ---------------------------------------------------------------------------------------------------------------
-- 다 대 다 관계
    --제품 - 쇼핑몰 주문
    
    --게시글 - 해시태그
---------------------------------------------------------------------------------------------------------------
-- 1980년대생 사원들의 사번, 사원명, 부서명, 
--자격증명,취득일자 조회
---------------------------------------------------------------------------------------------------------------
--FROM tb_emp E,tb_dept D,tb_certi C ,tb_emp_certi EC
--WHERE E.dept_cd = d.dept_cd
        --AND e.emp_no = ec.emp_no
        --AND C.CERTI_CD = EC.CERTI_CD
        --AND E.BIRTH_DE BETWEEN '19800101' AND'19891231'
---------------------------------------------------------------------------------------------------------------
--★WHERE절을 JOIN으로 바꾸는 방법
-- FROM 테이블 
       --테이블, 테이블 에서 , 대신  JOIN을 넣고
       -- 줄을 바꾸고 ON을 쓰고 조건을 입력 
---------------------------------------------------------------------------------------------------------------
SELECT
    E.emp_no, E.emp_nm, D.dept_nm, C.certi_nm, EC.acqu_de
FROM tb_emp E 
INNER JOIN tb_dept D 
ON E.dept_cd = D.dept_cd
JOIN tb_emp_certi EC
ON E.emp_no = EC.emp_no
INNER JOIN tb_certi C 
ON C.certi_cd = EC.certi_cd
WHERE E.birth_de BETWEEN '19800101' AND '19891231'
; 
---------------------------------------------------------------------------------------------------------------
--INNER 조인은 두 테이블 간에 
-- 연관 데이터가 있느 경우에만 사용
-- 어떤 쇼핑몰 회원이 한건도 주문하지 않은 경우
-- INNER JOIN 에서는 해당 회원이 조회되지 않음
---------------------------------------------------------------------------------------------------------------
-- DB구조
---------------------------------------------------------------------------------------------------------------
-- SELECT [DISTINCT] { 열이름 .... } 
-- FROM  테이블 또는 뷰 이름
-- JOIN  테이블 또는 뷰 이름
-- ON    조인 조건
-- WHERE 조회 조건
-- GROUP BY  열을 그룹화
-- HAVING    그룹화 조건
-- ORDER BY  정렬할 열 [ASC | DESC];
--                                                         ASC: 오름차순,DESC내림차순
----------------------------------------------------------------
--조인 조건을 안걸면 카테시안 곱이 만들어짐
--  테이블 X 테이블
-- 크로스조인 : 조건없이 바로 보여줌
---------------------------------------------------------------------------------------------------------------
SELECT 
*
FROM TEST_A CROSS JOIN TEST_B
;
----------------------------------------------------------------
--★ 출제 빈도 높은 것 : INNER조인(교집합) OUTER 조인
----------------------------------------------------------------
-- 사원 테이블과 부서 테이블을 조인 (사번, 사원명, 부서코드, 부서명)
SELECT 
    --A.emp_no, A.emp_nm, B.dept_cd, B.dept_nm
    *
FROM tb_emp A
INNER JOIN tb_dept B
ON A.dept_cd = B.dept_cd
;
------------------------------------------------------------------------
--출제 빈도 낮음
------------------------------------------------------------------------
-- # NATURAL JOIN
------------------------------------------------------------------------
-- 1. NATURAL JOIN은 동일한 이름을 갖는 컬럼들에 대해
--     자동으로 조인조건을 생성하는 기법입니다.

-- 2. 즉, 자동으로 2개 이상의 테이블에서 같은 이름을 가진 컬럼을 찾아
--     INNER조인을 수행합니다.

-- 3. 이 때 조인되는 동일 이름의 컬럼은 데이터 타입이 같아야 하며, 
--    ALIAS나 테이블명을 자동 조인 컬럼 앞에 표기하면 안됩니다.

-- 4. SELECT * 문법을 사용하면, 공통 컬럼은 집합에서 한번만 표기됩니다.

-- 5. 공통 컬럼이 n개 이상이면 조인 조건이 n개로 처리됩니다.★
------------------------------------------------------------------------
--내츄럴 조인이 알아서 스마트하게 조인해준다
------------------------------------------------------------------------
SELECT 
    A.emp_no, A.emp_nm, dept_cd, B.dept_nm 
    -- ★dept_cd 식별자는 한번만 써주기.!★앞에 식별자 떼어내야함~!
   
FROM tb_emp A
NATURAL JOIN tb_dept B
;
------------------------------------------------------------------------
SELECT 
*
FROM TEST_A  A
INNER JOIN TEST_B B
ON A.id = B.a_id
;
------------------------------------------------------------------------
SELECT 
*                                        --크로스 조인으로 곱으로 나옴~!
FROM TEST_A  A
NATURAL JOIN TEST_B B
;
------------------------------------------------------------------------
-- # USING절 조인
------------------------------------------------------------------------
--  1. NATURAL조인에서는 자동으로 이름과 타입이 일치하는 모든 컬럼에 대해
--    조인이 일어나지만 USING을 사용하면 원하는 컬럼에 대해서면 선택적 조인조건을 
--    부여할 수 있습니다.
--  2. USING절에서도 조인 컬럼에 대해 ALIAS나 테이블명을 표기하시면 안됩니다.
------------------------------------------------------------------------
SELECT 
   A.emp_no, A.emp_nm, dept_cd, B.dept_nm
FROM tb_emp A
NATURAL JOIN tb_dept B
;
        --  ㅣㅣ 위아래 같음
SELECT 
   A.emp_no, A.emp_nm, B.dept_cd, B.dept_nm
FROM tb_emp A
INNER JOIN tb_dept B
ON A.dept_cd = B.dept_cd
;
------------------------------------------------------------------------
--★ USING() 쓸때도 식별자 제거하고 속성만 적기!
SELECT 
   A.emp_no, A.emp_nm, dept_cd, B.dept_nm
   --식별자 제거하고 dept_md로만 써야함★
FROM tb_emp A
INNER JOIN tb_dept B
USING(dept_cd)
--using 도 natural 처럼 알아서 조건 만들어 처리해줌
;
------------------------------------------------------------------------